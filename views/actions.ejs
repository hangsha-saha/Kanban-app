<!DOCTYPE html>
<html>
<head>
  <title>Kanban Board</title>
  <link rel="stylesheet" type="text/css" href="/styles.css">
  <style>
     body, h1, h2, h3, p {
      margin: 0;
      padding: 0;
    }
    header {
      background-color: #007bff;
      color: white;
      padding: 10px 0;
      text-align: center;
      margin-top: 0;
    }

    h1 {
      text-align: center;
    }

    a {
      text-decoration: none;
    }

    body {
      font-family: Arial, sans-serif;
      background-color: #b4b4b4;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .kanban-board {
      max-width: 1500px;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      gap: 20px;
    }

    .status-column {
      flex: 1;
      flex-basis: 25%;
      background-color: #fff;
      border: 1px solid #ccc;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      margin: 0 5px;
    }

    .task-card {
      background-color: #fff;
      border: 1px solid #ccc;
      margin: 10px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      cursor: grab;
      transition: transform 0.2s ease-in-out;
    }

    .task-card:hover {
      transform: translateY(-5px);
    }

    .add-task-button-container {
      text-align: center;
      margin-top: 20px;
    }

    .task-list-section {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    </style>
</head>
<body>
  <header>
    <h1><span>üìù</span> Kanban Board</h1>
  </header>
<br><br>

  <div class="kanban-board">

    <div class="status-column" id="todo" ondrop="drop(event)" ondragover="allowDrop(event)">
      <h2>To Do</h2>
      <% tasks.filter(task => task.status === 'To Do').forEach(task => { %>
        <div class="task-card" draggable="true" ondragstart="drag(event)" id="<%= task.id %>">
          <h3><%= task.title %></h3>
          <p><%= task.description %></p>
          <a href="/edit/<%= task.id %>">Edit </a>|
          <a href="/delete/<%= task.id %>" onclick="return confirm('Are you sure you want to delete this task?')">Delete</a>
        </div>
      <% }); %>
      <br><br>
    </div>


    <div class="status-column" id="doing" ondrop="drop(event)" ondragover="allowDrop(event)">
      <h2>Doing</h2>
      <% tasks.filter(task => task.status === 'Doing').forEach(task => { %>
        <div class="task-card" draggable="true" ondragstart="drag(event)" id="<%= task.id %>">
          <h3><%= task.title %></h3>
          <p><%= task.description %></p>
          <a href="/edit/<%= task.id %>">Edit </a>|
          <a href="/delete/<%= task.id %>" onclick="return confirm('Are you sure you want to delete this task?')">Delete</a>
        </div>
      <% }); %>
      <br><br>
    </div>

    <div class="status-column" id="done" ondrop="drop(event)" ondragover="allowDrop(event)"  ondragstart="disable(event)">
      <h2>Done</h2>
      <% tasks.filter(task => task.status === 'Done').forEach(task => { %>
        <div class="task-card" draggable="true" >
          <h3><%= task.title %></h3>
          <p><%= task.description %></p>
          <a href="/delete/<%= task.id %>" onclick="return confirm('Are you sure you want to delete this task?')">Delete</a>
        </div>
      <% }); %>
      <br><br>
    </div>
  </div>
<br><br>

<div class="add-task-button-container">
    <a href="/" class="add-task-button"><span>üîô</span> Back</a>
  </div>
</div>
<br><br>

  <script>
  document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('addTaskForm').addEventListener('submit', addNewTask);

      const taskCards = document.querySelectorAll('.task-card');
      taskCards.forEach(card => {
        card.addEventListener('dragstart', drag);
      });
    });

    function allowDrop(event) {
      event.preventDefault();
    }
    function disable(event) {
      alert("Selected task is already completed!!");
    }
    function drag(event) {
      event.dataTransfer.setData('text/plain', event.target.id);
    }

    function drop(event) {
  event.preventDefault();
  const taskId = event.dataTransfer.getData('text/plain');
  const targetColumn = event.target;

  if (targetColumn.classList.contains('status-column')) {
    const task = document.getElementById(taskId);
    targetColumn.appendChild(task);
    task.style.display = 'block';
    const newStatus = targetColumn.id; 
    updateTaskStatus(taskId, newStatus);
  }
}
function updateTaskStatus(taskId, newStatus) {
  fetch('/updateTaskStatus', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ taskId, newStatus }),
  })
    .then(response => response.json())
    .then(data => {
      console.log(data.message);
    })
    .catch(error => {
      console.error('Error updating task status:', error);
    });
}

function limitTaskDisplay(columnId) {
      const column = document.getElementById(columnId);
      const maxTasks = 5;

      const tasks = column.querySelectorAll('.task-card');
      if (tasks.length > maxTasks) {
        const hiddenTasks = Array.from(tasks).slice(maxTasks);
        hiddenTasks.forEach(task => {
          task.style.display = 'none';
        });
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      limitTaskDisplay('doing');
      limitTaskDisplay('done');
    });
  </script>
</body>
</html>
